
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  users       User[]

  @@map("roles")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  roleId        Int?      @map("roleId")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())

  role       Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  accounts   Account[]
  sessions   Session[]

  @@map("users")
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("userId")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("sessionToken")
  userId       Int      @map("userId")
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}
